{
  
    
        "post0": {
            "title": "Title",
            "content": "import . import matplotlib.pyplot as plt import numpy as np . boxplot . &#51204;&#48513;&#44256;&#50696;&#51228;: &#54217;&#44512;&#51008; &#44316;&#52270;&#51008; &#52769;&#51221;&#44050;&#51064;&#44032;? . - 전북고등학교에서 통계학을 수업하는 두 선생님이 있다. 편의상 A선생님과 B선생님이라고 하자. A선생님이 강의한 반의 통계학 점수는 79.1점이고, B선생님이 강의한 반의 통계학 점수는 78.3점 이라고 하자. . - 의사결정: A선생님에게 배운 학생들의 실력이 평균적으로 좋을 것이다. . y1=[75,75,76,76,77,77,79,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들 y2=[76,76,77,77,78,78,80,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 . np.mean(y1), np.mean(y2) . (79.1, 78.3) . - 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생때문에 전체평균이 올라간 것이고, 나머지 학생들은 전체적으로 B반 학생들이 점수가 더 높다고 해석할 수 있다. . - 단순한 평균비교보다 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다. . plt.boxplot(y1) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0079ae1820&gt;, &lt;matplotlib.lines.Line2D at 0x7f0079ae1af0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0079ae1e80&gt;, &lt;matplotlib.lines.Line2D at 0x7f0077a79250&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0079ae14f0&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077a795e0&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077a79970&gt;], &#39;means&#39;: []} . A반의 boxplot | 뚝 떨어진 하나의 점은 98점 | 붉은 선은 중앙값 (평균이 아니라 중앙값) | 나머지 점들은 7~80점에 분포되어있다. | . plt.boxplot(y2) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779d3e20&gt;, &lt;matplotlib.lines.Line2D at 0x7f00779e41f0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779e4580&gt;, &lt;matplotlib.lines.Line2D at 0x7f00779e4910&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779d3a90&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779e4ca0&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779ef070&gt;], &#39;means&#39;: []} . B반의 boxplot | . - 아래와 같이 하면 박스플랏을 나란히 그릴 수 있다. . plt.boxplot([y1,y2]) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077942d30&gt;, &lt;matplotlib.lines.Line2D at 0x7f0077951100&gt;, &lt;matplotlib.lines.Line2D at 0x7f007795f6a0&gt;, &lt;matplotlib.lines.Line2D at 0x7f007795fa30&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077951490&gt;, &lt;matplotlib.lines.Line2D at 0x7f0077951820&gt;, &lt;matplotlib.lines.Line2D at 0x7f007795fdc0&gt;, &lt;matplotlib.lines.Line2D at 0x7f007796b190&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f00779429a0&gt;, &lt;matplotlib.lines.Line2D at 0x7f007795f310&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077951bb0&gt;, &lt;matplotlib.lines.Line2D at 0x7f007796b520&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f0077951f40&gt;, &lt;matplotlib.lines.Line2D at 0x7f007796b8b0&gt;], &#39;means&#39;: []} . - 미적인 그래프는 아니지만 이정도는 괜찮은것 같다. . boxplot&#51060;&#46976;? . - ref: https://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb . np.random.seed(916170) # connection path is here: https://stackoverflow.com/questions/6146290/plotting-a-line-over-several-graphs mu, sigma = 0, 1 # mean and standard deviation s = np.random.normal(mu, sigma, 1000) fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize=(10, 5)) # rectangular box plot bplot = axes.boxplot(s, vert=False, patch_artist=True, showfliers=True, # This would show outliers (the remaining .7% of the data) positions = [0], boxprops = dict(linestyle=&#39;--&#39;, linewidth=2, color=&#39;Black&#39;, facecolor = &#39;red&#39;, alpha = .4), medianprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Yellow&#39;), whiskerprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Blue&#39;, alpha = .4), capprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Black&#39;), flierprops = dict(marker=&#39;o&#39;, markerfacecolor=&#39;green&#39;, markersize=10, linestyle=&#39;none&#39;, alpha = .4), widths = .3, zorder = 1) axes.set_xlim(-4, 4) plt.xticks(fontsize = 14) axes.set_yticks([]) axes.annotate(r&#39;&#39;, xy=(-.73, .205), xycoords=&#39;data&#39;, xytext=(.66, .205), textcoords=&#39;data&#39;, arrowprops=dict(arrowstyle=&quot;|-|&quot;, connectionstyle=&quot;arc3&quot;) ); axes.text(0, .25, &quot;Interquartile Range n(IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=18) axes.text(0, -.21, r&quot;Median&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(2.65, -.15, &quot; &quot;Maximum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.15, &quot; &quot;Minimum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-.68, -.24, r&quot;Q1&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.21, r&quot;(Q1 - 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(.6745, -.24, r&quot;Q3&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(.6745, -.30, r&quot;(75th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(-.68, -.30, r&quot;(25th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(2.65, -.21, r&quot;(Q3 + 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.annotate(&#39;Outliers&#39;, xy=(2.93,0.015), xytext=(2.52,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); axes.annotate(&#39;Outliers&#39;, xy=(-3.01,0.015), xytext=(-3.41,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); fig.tight_layout() . . plotly . #!conda install -c conda-forge plotly #!pip install pandas import plotly.express as px from IPython.display import HTML import pandas as pd . A=pd.DataFrame({&#39;score&#39;:y1,&#39;class&#39;:[&#39;A&#39;]*len(y1)}) B=pd.DataFrame({&#39;score&#39;:y2,&#39;class&#39;:[&#39;B&#39;]*len(y2)}) df=pd.concat([A,B],ignore_index=True) . fig=px.box(data_frame=df,x=&#39;class&#39;,y=&#39;score&#39;) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . .",
            "url": "https://guebin.github.io/2021DV/2021/09/05/Untitled.html",
            "relUrl": "/2021/09/05/Untitled.html",
            "date": " • Sep 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "(1주차) 9월1일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/4): 데이터 시각화 과목에 대한 소개 . - (2/4): 강의안내 (강의계획서, 출석인정 방법, 과제안내, 질문하는 방법 등) . - (3/4): 윈도우에서 주피터랩 설치하는 방법 &lt;- 파이썬입문(2021) 수강하셨던 학생은 안들으셔도 될것 같아요. . - (4/4): 주피터랩 최초접속시 토큰설정하는 방법, 과제안내 &lt;- 파이썬입문(2021) 수강하셨던 학생은 안들으셔도 될것 같아요. (과제안내만 들으시면 될것같습니다) . &#47112;&#54252;&#53944; . - 카카오톡 스샷제출 .",
            "url": "https://guebin.github.io/2021DV/2021/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "relUrl": "/2021/09/01/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%941%EC%9D%BC.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/2021DV/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널 1 | . 2021년 2학기 종료후 폐쇄예정 &#8617; . |",
          "url": "https://guebin.github.io/2021DV/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/2021DV/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}